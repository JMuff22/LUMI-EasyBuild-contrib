easyblock = 'Binary'

name = 'HPC-Container-Wrapper'
version = '0.2.1'

homepage = 'https://github.com/CSCfi/hpc-container-wrapper'

whatis = [
    'Description: Tool for wrapping software environment in the container.'
]

description = """
This is a tool to create installations using existing containers. The basic idea is to install software through a container, convert this into a filesystem image and mount this filesystem image when running the container.
The main goal is to reduce the number of files on disk, and reduce the IO load when installations are started. If you are not running on a parallel filesystem with a lot of users and load, the points might not be that relevant. Only tested and developed on Lustre so benefits might be different on other parallel filesystems
The tool originally started as a way to package conda installations using container, as they cause a significant load on the filesystem. The idea being that using the tool should be very simple and as similar as possible to an un-containerized installation (drop in replacement for the majority of cases). This means that we try to hide the container as much as possible from the end-user.
"""

usage = """
Initialize new conda environment:

  conda-containerize new --prefix /path/to_install conda_env.yaml

Update already existing environment:

  conda-containerize update --post-install post.sh /path/to_install
  
Initialize new python environment with pip requirements to install:  
  
  pip-containerize new --prefix /path/to_install req.txt

To start your environment simply run program from bin/ subdirectory of the installation directory.
"""

toolchain = SYSTEM

sources = [{
#    'download_filename': 'v%(version)s.tar.gz',
#    'source_urls':       ['https://github.com/CSCfi/hpc-container-wrapper/archive/refs/tags']
    'filename':          '%(namelower)s.tar.gz',
    'git_config': {
    	'url':       'https://github.com/CSCfi',
        'repo_name': '%(namelower)s',
        'tag':    'v0.2.1'
    }
}]

builddependencies = [
    ('cray-python', EXTERNAL_MODULE),
]

dependencies = [
    ('cray-python', EXTERNAL_MODULE),
]

extract_sources = 'True'

buildininstalldir = 'True'

install_cmd = 'bash install.sh lumi'

prepend_to_path = ['%(namelower)s-%(version)s/bin']

sanity_check_paths = {
    'files': ['%(namelower)s/bin/conda-containerize', '%(namelower)s/bin/pip-containerize'],
    'dirs':  ['%(namelower)s/bin', '%(namelower)s/frontends'],
}

moduleclass = 'tools'
